/* eslint-disable no-use-before-define */
/* eslint-disable quotes */
/* eslint-disable prefer-template */
/* eslint-disable no-unused-expressions */
/* eslint-disable space-unary-ops */
const { GoogleSpreadsheet } = require('google-spreadsheet');
const _ = require('lodash');
const { MessageActionRow } = require('discord.js');
const { DateTime } = require('luxon');
const { createCommand } = require('../../commands');
const { pick } = require('../dmHandler/utils');
const creds = require('./serverbot-348821-a7dd28246089.json');
const { createButton } = require('../reminderHandler/reminderHandler');

const setupFlashCardCommands = (guild) => {
  // Initialize the sheet - doc ID is the long id in the sheets URL
  const funSurveySheet = new GoogleSpreadsheet('1TjDf9rHRPEJt59ZCApHnBF1KsKYm07O9889CgGTob7k');
  const docs = [funSurveySheet];

  // Initialize Auth - see https://theoephraim.github.io/node-google-spreadsheet/#/getting-started/authentication
  docs.forEach(async (doc) => {
    await doc.useServiceAccountAuth(
    // env var values are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
      creds
    );
    await doc.loadInfo(); // loads document properties and worksheets
  });

  async function handleFlashCardAnswer(interaction, answer, rightAnswer) {
    const isCorrect = answer === rightAnswer;

    let replyContent = ''
      + `\n\n  ${interaction.member.nickname} ` + pick(['answered:', 'said:', 'put:'])
      + `\n  ${answer}...`;

    if (isCorrect) {
      replyContent += `\n  That is.... ` + pick(['Correct!!!', 'Right!', 'The right one!', 'True!']);
    } else {
      replyContent += `\n  That is.... ` + pick(['WRONG!!!', 'FALSE!!', 'The wrong one!', 'NOT right!!']);
      replyContent += `\n  The right answer is: "\n${rightAnswer}"`;
    }

    const newContent = interaction.message.content + replyContent;
    interaction.message.edit({
      content: newContent,
      components:
      [new MessageActionRow({
        components: [
          createButton({
            label: pick(['Again! 👏 👏 👏', 'Another!!', 'do it again!', 'One more please!']),
            style: 'PRIMARY',
            customId: `do-it-again-flashcard-${DateTime.now().toISO()}`,
            onPress: drawFlashCard
          })
        ]
      })]
    });
    await interaction.reply(replyContent);
    interaction.deleteReply();
  }

  async function drawFlashCard(interaction) {
    const survey = pick(docs);
    const sheet = survey.sheetsByIndex[0];
    const rows = await sheet.getRows();
    const row = pick(rows);

    const questions = Object.keys(row)
      .filter((key) => key[0] !== '_')
      .filter((key) => key !== 'Timestamp');
    const question = pick(questions.slice(1, -1));
    const name = row[questions[0]];
    const rightAnswer = row[question];
    let answers = [rightAnswer];
    _.shuffle(rows).forEach((row) => {
      const otherAnswer = row[question];
      if (answers.length >= 4) return;
      if (otherAnswer && !answers.includes(otherAnswer)) {
        answers.push(otherAnswer);
      }
    });
    const messageContent = '.'
      + `\n **${interaction.member.nickname}** drew a flashcard!`
      + `\n What did ***${name}*** answer for this question?`
      + `\n    **${question}**`;
    interaction.reply({
      content: messageContent,
      components:
        [new MessageActionRow({
          components: answers.map((answer, index) => {
            const id = `flashCardAnswer-${index}${DateTime.now().toISO()}`;
            return createButton({
              label: `${answer}`.slice(0, 80),
              style: 'PRIMARY',
              customId: id,
              onPress: (interaction) => handleFlashCardAnswer(interaction, answer, rightAnswer)
            });
          })
        })]
    });
  }

  createCommand(guild, {
    name: 'flashcard',
    description: 'Draw a flash card of pbc members survey answers',
    execute: drawFlashCard
  });
};

module.exports = {
  setupFlashCardCommands
};
